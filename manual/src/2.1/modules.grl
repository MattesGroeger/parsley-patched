#sc1 modules_intro Building Modular Applications #sc1

#par Parsley allows you to build a hierarchy of Contexts that can be 
dynamically loaded and unloaded. This hierarchy can be built no matter whether you are using
Flex Modules or not, even in pure AS3 applications. For Flex Modules Parsley just offers 
an additional level of integration in that it makes it easier to deal with multiple different
ApplicationDomains. #par



#sc2 modules_context Modular Contexts #sc2

#par In larger applications you may want to split your application into modules which are
loaded on demand. In this case it would be unfortunate to have a monolithic Context
that is fully loaded and initialized at application startup. Even splitting the configuration into
multiple files like shown in #ref config_combine #ref won't help since those files will be merged into
a single Context and loaded and initialized as if it was a single large configuration file. #par

#par This is where another feature of Parsley comes in handy: when creating a #cdi Context #cdi
it can connect to a parent Context. The parent may be the main context loaded at
application startup for example and the child context may be one required by a module loaded on demand.
In the configuration for the child Context you can use any object from the parent Context for Dependency Injection 
(but not vice versa). Messaging also works across Context boundaries, depending on the scope you dispatch through. 
You can create deeply nested hierarchies of Contexts, but often the structure would be rather flat, with one 
root context and any number of child Contexts on the same level. #par

#par There are two different ways to initialize such a child Context: #par


#sub Connecting a Context hierarchy to a view hierarchy #sub

#par When you are specifying a view root with any of the static ContextBuilder entry points,
the #cdi ViewManager #cdi associated with the Context will use that view root for two purposes:
it will listen for bubbling events from components that wish to get wired to the Context and
it will listen for bubbling events from other ContextBuilders sitting somewhere below in the
view hierarchy. This way you do not have to manually specify the parent Context or the
ApplicationDomain, the framework will take care of that for you: #par

#cdb
var viewRoot:DisplayObject = ...;
FlexContextBuilder.build(BookStoreConfig, viewRoot);
#cdb

#par or: #par

#cdb
var viewRoot:DisplayObject = ...;
XmlContextBuilder.build("config.xml", viewRoot);
#cdb

#par In the example above the new Context will use the view root to automatically look for a parent Context and to
listen for child Contexts within the view hierarchy. #par

#par In some scenarios you may want to keep the Context hierarchy separate from the view hierarchy.
This is where the second option for building the hierarchy comes into play: #par


#sub Manually specifying the parent Context #sub

#par You can define an existing Context as the parent for a new Context with an optional parameter 
of all the various ContextBuilder methods shown in #ref config_intro #ref: #par

#cdb
var parent:Context = ...;
FlexContextBuilder.build(BookStoreConfig, null, parent);
#cdb

#par In this case we pass #cdi null #cdi for the view root parameter and instead specify the parent
manually. You must also be aware of the fact that without a view root the Context is not able
to automatically detect the ApplicationDomain for reflection. So if you are not working in the
root ApplicationDomain but instead in a child domain of a loaded Flex Module for example,
you also have to pass the domain to the builder method: #par

#cdb
var parent:Context = ...;
var domain:ApplicationDomain = ...;
FlexContextBuilder.build(BookStoreConfig, null, parent, domain);
#cdb

#par Again this is not necessary when specifying a view root, since the builder is then able
to automatically detect the parent Context and the ApplicationDomain. #par



#sc2 modules_lifecycle Context Lifecycle #sc2

#par If you load multiple #cdi Context #cdi instances as modules like described
in the previous section, you may want to get rid of them when you unload a module - without
affecting the parent. Actually that is quite easy, just do this: #par

#cdb
context.destroy();
#cdb

#par When connecting a Context hierarchy to a view hierarchy it is
even easier. You don't have to explicitly destroy the Context then, it will happen automatically
when the last view root associated with the Context gets removed from the stage. 
This is the default behaviour of the #cdi ViewManager #cdi which can be adjusted in case
you do not want the Context lifecycle to depend on the time the view is on the stage.
You can finetune the behaviour with properties of the #cdi ViewManagerFactory #cdi. #par

#par When a Context gets destroyed the following actions occur: #par

#lst
#lse All objects configured in the destroyed Context stop receiving messages dispatched by Parsleys central
#cdi MessageRouter #cdi. This affects all elements annotated with #cdi MessageHandler #cdi, #cdi MessageBinding #cdi,
#cdi MessageInterceptor #cdi or #cdi MessageError #cdi. #lse

#lse If any objects declared in the destroyed Context declared #cdi ManagedEvents #cdi they will be ignored from now
on and no longer dispatched trough Parsleys messaging system. #lse

#lse All methods annotated with #cdi [Destroy] #cdi (or the corresponding MXML or XML tags) 
on any object of the destroyed Context get invoked. #lse

#lse The destroyed Context will remove all internal references to the configured objects so they are eligible
for garbage collection. (Of course you have to make sure that your application does not retain any references
to those objects). #lse

#lse The Context may no longer be used after invoking #cdi destroy #cdi. Any subsequent method invocations
on that Context throw Errors. The parent of the destroyed Context (if any) is not affected and may continue
to operate normally. #lse
#lst



#sc2 modules_flex Using Flex Modules #sc2

#par In version 2.0.x the framework offered a special #cdi ContextModule #cdi MXML tag to specify
the configuration for the module. This is no longer needed. The framework specific ContextModule and ModuleLoader
tags have been removed. Instead the support for Flex Modules is now fully transparent. You load
a Module either with the regular Flex ModuleLoader tag or with the Flex ModuleManager.
You can then create child Contexts anywhere within that Module, it does not have to happen in
the root Module component. If you connect the Context hierarchy to the view hierarchy like demonstrated in the preceding sections
the child Context will automatically determine the parent Context and the ApplicationDomain
of the Module. #par

