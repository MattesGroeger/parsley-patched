#sc1 overview_intro Overview #sc1

#par Parsley is an Application Framework for Flex and Flash Applications built upon an IOC Container and
Messaging Framework that can be used to create highly decoupled architectures. 
It allows you to configure objects to be managed by the container with Metadata, MXML, XML or ActionScript
and is easily extensible. #par

#par While many other Application Frameworks for the Flash Platform are either a pure Flex Framework that cannot
be used without the Flex SDK or are a classic Flash Framework without any deeper integration with Flex, Parsley
is both. The core of the framework (the IOC Container and the Messaging Subsystem) does not depend on the
Flex SDK at all, but there are several additional modules that are specifically designed for Flex, providing
support for MXML Configuration, View Wiring and Flex Modules. #par


#sc2 overview_features Features List #sc2

#par This section gives a quick overview over the available features linking to the other chapters of the manual
where appropiate. There is also a #ref tutorial_intro #ref chapter containing a few sample use cases for the impatient. #par


#sub IOC Container #sub

#par Parsley is a classic IOC Container. It provides support for Dependency Injection, Object Lifecycle Management
and Messaging. The key differentiator is the scope of the framework: While still being as easy to use  
as many smaller IOC frameworks for simple applications, it also provides many features which are essential for building
large, complex and modular applications, like support for Flex Modules, Object Disposal or numerous extension points. #par


#sub Dependency Injection #sub

#par The core feature of any IOC Container. Now with Parsley 2 dependencies can be conveniently declared using AS3 Metadata
Tags (#cdi [Inject] #cdi) on properties, methods or constructors or alternatively with MXML or XML. 
See #ref injection_intro #ref for details. #par


#sub Messaging #sub

#par Parsley contains a Messaging Framework that allows for objects to send and receive messages in a fully decoupled way.
You can declare events on sending objects with the #cdi [ManagedEvents] #cdi tags, so that they will be routed through
Parsley to all registered handlers. The receiving objects can declare interest in particular message types with several
metadata tags like #cdi [MessageHandler] #cdi. Message selection happens based on the type (class) of the message and
optionally based on additional selectors like event type, instead of being purely String based like regular event handlers.
This eases development of large applications where you don't have to care for event type constants being unique for the
whole system.
See #ref messaging_intro #ref for details. #par


#sub Advanced IOC Container Features #sub

#par #ref advanced_lifecycle #ref: Objects can have methods marked with #cdi [PostConstruct] #cdi 
(which will be invoked after the object has been instantiated and configured) or #cdi [PreDestroy] #cdi which will be 
invoked when the container gets destroyed.
For modular applications it's essential that you can create dynamically loaded sub-contexts and be able to dispose the whole
module when it's no longer needed by the application. #par
 
#par #ref advanced_async #ref: Configuration option for asynchronously initializing objects (e.g. objects
that need to load data before they can operate). In this case the container will defer the initialization
of other objects until those configured to be asynchronous are ready. #par


#sub Flex View Wiring #sub

#par This is a special integration module for Flex and solves the problem that you usually wouldn't want to declare
Flex Components in IOC Container configuration files, but instead inside your MXML view hierarchy like always.
Parsley 2 now allows to connect these components to the IOC Container on-the-fly when they are added to the stage.
See #ref view_intro #ref for details. #par


#sub Support for Flex Modules #sub

#par Being also a special integration module for Flex it allows to associate a set of configuration classes or files
with a Flex Module, containing services, actions, mediators and so on, which are only needed for a particular context.
The whole sub-context gets automatically destroyed, disposing all objects configured for the module, when the Flex Module
gets unloaded.
See #ref modules_intro #ref for details. #par


#sub Localization #sub

#par Allows to bind properties to resources with the #cdi [ResourceBinding] #cdi tag. Integrates with the
Flex ResourceManager for Flex Applications and contains its own Localization Module for Flash Applications.
See #ref resources_intro #ref for details. #par


#sub Extensibility #sub

#par Parsley can serve as the base for building higher-level frameworks on top of. Or you may just want to create
some additional configuration tags for use cases which are frequent for a particular application.
Parsley is easy to extend. A single implementation of an extension interface can be used to create
a custom configuration tag that can be used as a Metadata, MXML or XML tag.
See #ref extensions_intro #ref and #ref advanced_factories #ref for details. #par


#sc2 overview_modules Parsley and Spicelib Module SWCs #sc2

#par Parsley and the underlying Spicelib are very modular, so you are able to only select the SWCs actually
required for your application. The #cdi release #cdi folder in the download contains SWCs for Parsley and
Spicelib which combine all the modules into a single large SWC (for both frameworks one SWC for Flex and one for Flash). #par

#par Alternatively the #cdi module #cdi folder contains smaller SWCs only containing a single framework module which can be 
combined to add only the feature set required by your application to the classpath. To use these smaller module SWCs it's
essential to know the dependencies and the content of each SWC. #par

#par The following diagram shows the dependencies between the various SWCs. The names correspond to the names of the SWCs
minus version number and suffix. Several optional dependencies were left out to keep the diagram clear. Most of them
are obvious (e.g. several modules include custom XML configuration tags and in case you use those the module will also
depend on parsley-xml). #par

#img doc_img parsley-spicelib-dependencies.jpg #img

#par The following table summarizes the content for each of these SWCs: #par

#tbl
#tbr #cdi spicelib-core #cdi # Core utilities, errors and events. #tbr 
#tbr #cdi spicelib-reflect #cdi # The Spicelib Reflection API. See #ref reflection_intro #ref for details. #tbr 
#tbr #cdi spicelib-xml #cdi # The XML-to-Object Mapper. See #ref xmlmapper_intro #ref for details. #tbr 
#tbr #cdi spicelib-task #cdi # The Task Framework for asynchronous operations. See #ref task_intro #ref for details. #tbr 
#tbr #cdi spicelib-flash #cdi # The Flash Logging Framework. See #ref spicelib-logging_intro #ref for details. #tbr 
#tbr #cdi parsley-core #cdi # The core IOC Container - Dependency Injection, Messaging, Configuration with Metadata or ActionScript. #tbr 
#tbr #cdi parsley-flex #cdi # Flex Integration Features: #ref config_mxml #ref, #ref view_intro #ref, #ref modules_intro #ref. #tbr 
#tbr #cdi parsley-xml #cdi # Support for configuration with XML files. See #ref config_xml #ref for details. #tbr 
#tbr #cdi parsley-flash #cdi # Flash Integration Features: #ref resources_flash #ref, #ref logging_flash #ref. #tbr 
#tbr #cdi parsley-pimento #cdi # Configuration Tags for Pimento and Cinnamon. See #ref remoting_pimento #ref and
#ref remoting_cinnamon #ref. #tbr
#tbl
 

#sc2 overview_other_resources Other resources #sc2

#par In addition to the material presented in this manual there are also some articles and sample applications
available which have been created by other users. If you have created something that you want to see listed here
just post a link in the #url /forum/ Forum #url. #par

#lst 

#lse #url http://coenraets.org/blog/2009/07/building-a-flex-application-with-the-parsley-framework/ Building a Flex Application with the Parsley Framework #url:
Article and Sample Application created by Christophe Coenraets. The sample is a small Contact Management application. It can be run with a
mock service implementation or with BlazeDS. #lse

#lse #url http://joelhooks.com/2009/07/12/inversion-of-control-and-dependency-injection-in-flex-using-the-parsley-application-framework-part-1/ Inversion of Control and Dependency Injection in Flex using the Parsley Application Framework #url:
Two-part article by Joel Hooks. #lse

#lse #url http://blogs.adobe.com/tomsugden/2009/07/the_trend_towards_inversionofc.html The Trend Towards Inversion-of-Control Frameworks in Flex #url:
Article written by Tom Sugden. Not focused solely on Parsley but nevertheless and interesting read. #lse

#lse #url http://www.sitronnier.com/blog/parsley-2-basic-flex-example Basic Flex Example #url and 
#url http://www.sitronnier.com/blog/parsley-2-basic-flash-example Basic Flash Sample #url: Two basic samples created by
Laurent Sitronnier. Demonstrates the use of Parsley in Flex and Flash Applications side-by-side. #lse

#lst






 