#sc1 mvc_intro Building MVC Architectures #sc1

#par Parsley is different from several other Flex or Flash MVC Frameworks in that it does not provide
very much explicit support for the various pieces of an MVC architecture. This was a side effect of
our primary goal being to allow to design a fully decoupled architecture. Decoupled in a sense that
not only the parts of your application are decoupled from each other, but also decoupled from the
framework itself. For example providing base classes for controllers or mediators in the framework 
that application classes have to extend is a bad
idea if you want to support such a decoupled architecture. #par

#par For that reason the Messaging Framework in Parsley which we already described in #ref messaging_intro #ref
is pretty generic. It does not assume a particular programming style or architectural pattern.
Nevertheless Parsley still falls into the same category as many other MVC Frameworks since
the Messaging Framework #str can #str easily be used in a way that helps building
an application based on the MVC architectural pattern. In this chapter we will provide
some examples on how to use the Messaging Framework in such a context. #par



#sc2 mvc_flow MVC Event Flow Example #sc2


#par The following diagram shows an example flow for a particular use case (user adds
item to shopping cart) in the context of a Parsley MVC application: #par

#img doc_img mvc_flow.jpg #img

#par Explanations for the numbered steps from the diagram: #par

#lst

#lse 1: The user clicks the "Add to cart" button. With Flex for example this will generate a low
level UI event. The event handler in the component invokes a method on the presentation model instance 
(usually injected into the view) which handles communication between View and Controller. #lse

#lse 2: 
The model creates an application message possibly gathering any further
information from the view and encapsulating this information in the message. 
This message will then be dispatched through Parsleys #cdi MessageRouter #cdi #lse

#lse 3: The #cdi MessageRouter #cdi will then process any MessageHandlers, MessageBindings, MessageInterceptors
or Commands which were registered for this message type (usually with Metadata tags on methods or properties, alternatively
in MXML or XML). In this case the #cdi AddToCartCommand #cdi will be invoked. #lse

#lse 4: The command will invoke a remote service method 
(the service usually being injected). The asynchronous operation will be managed by the framework
which allows to avoid some of the usual plumbing code. Neither the command nor any other part
of the application has to explicitly add a result handler to the AsyncToken returned by the remote call. #lse

#lse 5: The framework receives the result. It is first returned to the command instance itself if it contains
a result handler. But this is purely optional. #lse

#lse 6: The result handler in the command might modify 
or cache the model before it gets passed to other result handlers. #lse

#lse 7: Next the framework will invoke any other registered result handlers in the application. 
In this case the CartPM contains a result handler which will now be invoked causing the model
instance to update its internal state. #lse

#lse 8: The view is refreshed, usually through binding to properties of the presentation model. #lse

#lst

#par From the example above many core elements will have been setup and wired in a
Parsley #cdi Context #cdi including the view as described in #ref view_intro #ref. 
This usually includes all controller actions, their dependencies like remote services, 
and the registration for particular messages in the #cdi MessageRouter #cdi. #par

#par If you think this diagram smells like over-engineering, it merely serves as an example
for a full blown MVC architecture of a large and complex application. In smaller and simpler
applications you can of course simplify the design presented above. For example the Mediator
may be omitted in simpler use cases where the view itself dispatches and receives application
messages. #par



#sc2 mvc_implementation Example Command Implementation #sc2

#par Finally we'll pick one of the pieces presented in the diagram above and show
how the implementation and configuration of such an application part may look like.
We'll chose the #cdi AddToCartCommand #cdi that participates in the application flow shown in the diagram. #par

#cdb
package com.bookstore.actions {

import mx.rpc.AsyncToken;
import mx.rpc.Fault;
import mx.rpc.remoting.RemoteObject;

import com.bookstore.events.CartEvent;
import com.bookstore.services.CartService;
import com.bookstore.model.LineItem;

public class AddToCartCommand {


    [Inject(id="cartService")]
    public var cartService:RemoteObject;

    
    public function execute (event:CartEvent) : AsyncToken {
        return cartService.addItem(event.item);
    }
    
    public function result (item:LineItem) : void {
        /* modify or cache the result */
    }
    
    public function error (fault:Fault) : void {
        /* handle fault */
    }
    
}

} 
#cdb

#par And this is how you can configure such a command in a Parsley configuration class (in this case MXML): #par

#cdb
<DynamicCommand 
    type="{AddToCartCommand}" 
    selector="addItem"
/>
#cdb

#par We'll now examine the various parts of this class in detail. First there is the method
that executes the command: #par

#cdb
public function execute (event:CartEvent) : AsyncToken {
#cdb

#par In this example we are using regular Flash Events as application messages, but you are not forced to do so
as described in #ref messaging_dispatching #ref. #par

#par The method parameter tells the framework that we are interested
in #cdi CartEvents #cdi. MessageHandler selection happens based on message type, so in a large and complex application
you won't run into problems having to maintain event type constants which are unique across the whole system. #par

#par But since we are not interested in all CartEvents that get dispatched we specify a #cdi selector #cdi attribute
in the MXML configuration
which in case of Events points to the type property of the Event. In this case we are intereseted in CartEvents with
the type #cdi addItem #cdi which was dispatched by the View or the presentation model as a result of an UI event. #par

#par In the body of that method we are using the injected #cdi CartService #cdi: #par

#cdb
[Inject(id="cartService")]
public var cartService:RemoteObject;
#cdb

#par In this example we are using a RemoteObject. We usually prefer to use injection by type but this is not
applicable for RemoteObjects which can only be distinguished by id. For details see #ref remoting_intro #ref. #par

#par Finally there are the result and error handlers: #par

#cdb
public function result (item:LineItem) : void {
    
public function error (fault:Fault) : void {
#cdb

#par We are following a naming convention here so we can avoid any metadata configuration altogether.
Based on the method names the framework knows which method executes the command and which handles results
or faults. The result and error handler are both optional. #par


