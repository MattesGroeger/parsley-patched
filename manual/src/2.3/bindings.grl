#sc1 bindings_intro Decoupled Bindings #sc1

#par Introduced with version 2.3 this feature adds a major new option to the existing ways of decoupling the parts of your 
application, injection and messaging. It's not a new idea though. Similar concepts existed in Seam in the Java world (based
on its #cdi @In #cdi and #cdi @Out #cdi annotations) and have already been picked up by other Flex frameworks, too, like 
in GraniteDS that also offers #cdi [In] #cdi and #cdi [Out] #cdi metadata configuration. #par 
  


#sc2 bindings_difference Comparing Dependency Injection and Decoupled Bindings #sc2

#par This section aims to give an overview over the differences between two framework features that share a few similarities
and a few suggestions for how to determine which mechanism to use in a particular use case. #par

#par Note that there are other frameworks who even mix these two mechanisms into a single feature. However I think that it is
better to have a clear distinction as there are significant differences in the pros and cons for both.
It also makes the code easier to read when there are distinct tags for these capabilities. #par



#sub Dependency Injection #sub

#par For details see #ref injection_intro #ref #par

#par Classic Dependency Injection (using Parsley's #cdi [Inject] #cdi tag) offers the following advantages 
over Decoupled Bindings: #par

#lst
#lse This feature is designed for robustness. An object declares a dependency on some collaborator and it can rely
on the container injecting a matching instance when the object gets initialized. Likewise it will also
make sure that the injected object has a lifecycle at least as long as the target it is injected into. This way
the dependent object has a guarantee that the collaborator does not suddenly "go away". This is the reason that
you cannot inject from a child Context into a parent (vice versa is fine of course) and also cannot inject 
dynamic objects (unless they are defined with the #cdi <DynamicObject> #cdi tag in the Context) as they could 
be removed anytime. #lse

#lse Similarly useful for increased robustness is the fact that the container gives you the guarantee that
all injections have already been performed when the method marked with #cdi [Init] #cdi gets invoked.
This often simplifies internal initialization code. #lse

#lse Any errors caused by misconfiguration (e.g. ambuigities or missing dependencies) are already detected at Context 
initialization time. #lse
#lst





#sub Decoupled Bindings #sub

#par Decoupled Binding (using Parsley's #cdi [Publish] #cdi and #cdi [Subscribe] #cdi tags) offers the following 
advantages over Dependency Injection: #par

#lst
#lse This feature is much more dynamic than Dependency Injection. It is perfectly legal for any subscriber to have no value
at all or to receive multiple updates of the same property during its lifecycle. It is really more the decoupled equivalent
of the typical usage of Flex Bindings. #lse

#lse The published object does not even have to be a container managed object. So this feature can be used in a more 
lightweight way. Publishing an object also does not cause reflection on the object (unless you specify that it should
be managed), so it has benefits for performance. #lse
#lst

#par Of course there is also a price to pay compared to injection: #par

#lst
#lse There is no guarantee that the subscribers have any values when the method marked with #cdi [Init] #cdi gets invoked 
on the object as the value can be published and updated at any point in time. #lse

#lse Errors caused by misconfiguration (in particular ambuigities) are sometimes not detected at Context initialization
time. They can happen anytime a new publisher enters the Context (dynamic objects can act as publishers, too). #lse
#lst




#sc2 bindings_basics Basic Usage #sc2

#par To set up a publisher on a managed object you can use the #cdi Publish #cdi metadata tag: #par

#cdb
[Publish][Bindable]
public var selectedContact:Contact;
#cdb

#par In Flex applications you also need to use the #cdi [Bindable] #cdi tag on the publishing side, as the implementation for 
Flex is based on the standard Flex Binding architecture. For Flash applications see the last section in this chapter. #par

#par As soon as you update such a publisher property, 
the value will be pushed to all matching subscribers in any other object in any Context: #par

#cdb
[Subscribe]
public var selectedContact:Contact;
#cdb

#par If you do not specify an object id, the matching subscribers will be determined by the type of the property, in this
case #cdi Contact #cdi. Like with injection and messaging this works polymorphically. You can publish a #cdi Dog #cdi and
a subscriber for #cdi Animal #cdi would also get updated. #par

#par Like with all other features it is best to stick with matching by type and avoid the use of string identifiers if possible.
If you need to publish multiple objects of the same type, you can specify an id: #par

#cdb
[Publish(objectId="selectedContact")][Bindable]
public var selectedContact:Contact;
#cdb

#par Of course the subscribers must specify the corresponding id then, too. In some case you may also be able to use scopes
to confine the area of the application an object is published to and avoid the use of an id this way. #par

#par You can also let a property act as a publisher and subscriber at the same time: #par

#cdb
[PublishSubscribe][Bindable]
public var selectedContact:Contact;
#cdb

#par Now the value will be updated when any other publisher updates, but still act as a publisher itself. #par

#par Finally, like most other tags these tags can be used in MXML and XML, too: #par

#cdb
<Object type="{MyPublisher}">
    <Publish property="selectedContact"/>
    <!-- other tags -->
</Object>
#cdb



#sc2 bindings_conflicts Avoiding Conflicts #sc2

#par For the Decoupled Binding facility to work in a reliable and robust way, you have to make sure that your setup does not
lead to ambuigities. The framework must know which publisher is "in charge" for a particular subscriber at any point in time.
In general publishing to different scopes cannot lead to conflicts as the scopes are completely shielded from each other.
But for any publishing within a single scope for the same type or id (depending on whether you use an id), the rules
are as follows: #par

#lst
#lse You can have exactly one #cdi [Publish] #cdi tag and any number of matching #cdi [Subscribe] #cdi tags. #lse
#lse You can have any number of #cdi [PublishSubscribe] #cdi tags and any number of matching #cdi [Subscribe] #cdi tags. #lse
#lse It's also legal to have a #cdi [Publish] #cdi tag without any matching #cdi [Subscribe] #cdi tag and vice versa. If a 
#cdi [Subscribe] #cdi tag has no matching #cdi [Publish] #cdi tag its value will be set to null. #lse
#lst

#par As you see having more than one #cdi [Publish] #cdi tag for the same type or id within a single scope is illegal.
The same goes for combining #cdi [Publish] #cdi and #cdi [PublishSubscribe] #cdi for the same type or id.
In those cases the framework would not be able to determine "who is in charge". This problem does not occur with multiple
#cdi [PublishSubscribe] #cdi tags. Since those are subscribers, too, changing one of them will also update all the others,
so that they are always in sync. #par




#sc2 bindings_basics Using Scopes #sc2

#par Like with Messaging the Decoupled Binding facility allows to use scopes. Sometimes you don't want to publish an object
globally, but instead use different instances in different areas of the application. For a general introduction see
#ref messaging_scopes #ref in the messaging chapter. #par

#par In contrast to messaging there is one major difference in the default behaviour. With messaging the default for the sending
side is to dispatch through all scopes available for the Context so that the receiving side can decide which scope to listen for.
This is different for publishing as the former would lead to conflicts too often (see preceding section). Instead the default is to 
publish only to the global scope. #par

#par For any other scope than the global scope you have to use the scope attribute explicitly: #par

#cdb
[Publish(scope="window")][Bindable]
public var selectedContact:Contact;
#cdb

#par And of course on all subscribers, too: #par

#cdb
[Subscribe(scope="window")]
public var selectedContact:Contact;
#cdb



#sc2 bindings_managed Publishing Managed Objects #sc2

#par In all preceding examples the state of the published object did not change. You can use either container-managed objects
or any other objects not known by the container and publish it to subscribers. If it is unmanaged it would remain so.
In some cases you might want to explicitly add the object to the Context dynamically only for the time it is being published.
This way it can also participate in messaging and other container features. This has the same effect as using the 
Context API to create dynamic objects like demonstrated in #ref lifecycle_dynamic #ref, just with the advantage
that you do not have to talk to the framework API. #par

#par This is how it works, you just add the #cdi managed #cdi attribute to the #cdi Publish #cdi tag: #par

#cdb
[Publish(managed="true")][Bindable]
public var selectedContact:Contact;
#cdb

#par Now anytime you set this variable to a Contact instance, that instance gets added to the Context automatically.
It remains managed until: #par

#lst
#lse The variable is set to a different Contact instance or it is set to null. #lse
#lse The object holding the variable is removed from the Context. #lse
#lse The Context the object belongs to gets destroyed. #lse
#lst

#par This also means that the lifecycle methods demarcated with #cdi [Init] #cdi and #cdi [Destroy] #cdi can be used
on the published object to get notified when the object gets published and removed. #par



#sc2 bindings_flash Bindings in Flash #sc2

#par The implementation for Flash avoids the use of the Flex Binding facility. This feature is fully functional without Flex, too,
but it requires some additional work. In Flash applications you would leave out the #cdi [Bindable] #cdi tag.
Instead the publisher has to manually signal that the value of the publisher 
property has changed: #par

#cdb
private var _contact:Contact;

[Publish]
public function get selectedContact () : Contact {
    return _contact;
}

public function set selectedContact (value:Contact) : void {
    _contact = value;
    #hlt dispatchEvent(new Event(Event.CHANGE)); #hlt
}
#cdb

#par If a single class has multiple publisher properties you can alternatively optimize and specify different
change event types for different properties: #par

#cdb
private var _contact:Contact;

[Publish(#hlt changeEvent="contactChanged" #hlt)]
public function get selectedContact () : Contact {
    return _contact;
}

public function set selectedContact (value:Contact) : void {
    _contact = value;
    #hlt dispatchEvent(new Event("contactChanged")); #hlt
}
#cdb

#par Apart from the necessity to dispatch a change event, everything else described in the preceding sections of this 
chapter also applies to Flash applications. #par






