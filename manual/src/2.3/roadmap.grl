#sc1 roadmap_intro Road Map #sc1

#par After the major feature additions in 2.1 and 2.2 the next release will very likely not contain changes with 
a comparable impact. #par
  


#sc2 roadmap_v23 Version 2.3 #sc2

#par The major areas of improvements for this versions are highligthed in the following sections.
For the full list of features you can also browse the 
#url http://opensource.powerflasher.com/jira/browse/PSL?report=com.atlassian.jira.plugin.system.project:roadmap-panel Jira Road Map #url. #par



#sc3 roadmap_dynamicobjects Enhancements for Dynamic Objects ?done #sc3

#par The API for Dynamic Objects was introduced with version 2.1. It is getting used internally for features
like dynamic view wiring or dynamic commands, but can also be utilized by application code. 
Now this feature gets a major overhaul and adds the following capabilities: #par



#sub Declare Dynamic Objects in MXML or XML configuration #sub

#par So far it was only possible to programmatically create such a dynamic object and then add it to the Context.
Now it is also possible to simply declare these objects in a configuration class or file the same way like
classic singleton declarations with the new DynamicObject tag: #par

#cdb
<DynamicObject id="someId" type="{SomeClass}"/>
#cdb

#par These objects can then be fetched from the Context through the Context API (see next section) and then
be removed at any point in time. #par

#par Previous version also allowed a declaration like this: #par

#cdb
<Object id="someId" type="{SomeClass}" singleton="false"/>
#cdb

#par This is now obsolete and in fact deprecated, as it gets interpreted like a DynamicObject tag anyway.
This is not just a change in syntax though, as DynamicObject have more capabilities than the non-singleton
declarations in previous versions (see the following sections for details). #par

#par Alongside these changes there was also the opportunity for a major simplification of internal APIs.
After several months of Parsley 2 getting adopted in real world projects it became apparent that the many
subtle differences in flavors of object types are not really needed, and the number of sub-interfaces for
the core #cdi ObjectDefinition #cdi interface could be reduced. There are now only two left: #cdi SingletonObjectDefinition #cdi
and #cdi DynamicObjectDefinition #cdi, as these are really the only two types of objects needed in practice. #par  



#sub New methods for Dynamic Objects in the Context interface #sub

#par In previous versions there was a separate API for Dynamic Objects which could only be accessed through calling
#cdi Context.createDynamicContext() #cdi. This is no longer needed (just supported for backwards-compatibility).
This feature is now a core concept and thus integrated in the Context interface itself with four new methods: #par

#cdb
function createDynamicObject (id:String) : DynamicObject;
	
function createDynamicObjectByType (type:Class) : DynamicObject;
	
function addDynamicObject (instance:Object, 
                           definition:DynamicObjectDefinition = null) : DynamicObject;
	
function addDynamicDefinition (definition:DynamicObjectDefinition) : DynamicObject;
#cdb

#par The first two method allow dynamic objects to be created from DynamicObject tags in the configuration (see previous
section), accessed either by type or by id. The latter two are basically the same as the methods that already existed
in the old #cdi DynamicContext #cdi interface. #par



#sub The lifecycle of Dynamic Objects injected into other objects will be synchronized #sub

#par This feature was requested a lot in the forum. In previous versions simply setting #cdi singleton=false #cdi
for an Object declarations always created objects managed by the Context indefinitely (or until the Context gets 
destroyed). This was unfortunate in cases where such an object gets injected into a DynamicCommand for example,
where everyone would expect that the injected object gets removed from the Context as soon as the command
finished executing. DynamicObjects in version 2.3 do indeed have such a synchronized lifecycle. #par



#sc3 roadmap_dsl Configuration DSL ?done #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-353 Jira Ticket for Comments #url #par

#par Some of this functionality is already available in small fragments, but it seems natural to expand
this and remove the need to add cumbersome plumbing code to custom configuration tags or
other types of extensions. Many tag implementations will actually only contain some very trivial logic
with this new mechanism which will also be used by the builtin tags then. #par

#par A sample might roughly look like this: #par

#cdb
var config:Configuration = ...;

var builder:ObjectDefinitionBuilder = config.builders.forClass(MessageConfirmation);

builder
    .constructorArgs
        .value(title)
        .value(text);

builder
    .method("showAlert")
        .messageInterceptor()
            .type(type)
            .selector(selector);

builder
    .method("configureRemoteObject")
        .observe(RemoteObject)
            .phase(ObjectLifecycle.PRE_INIT)
            .scope(ScopeName.GLOBAL);

builder            
    .property("contact")
        .injectByType();
    
builder
    .property("contact")
        .messageBinding()
            .type(ContactEvent)
            .selector("save")
            .property("savedContact");

builder
    .asSingleton()
        .id(id)
        .order(17)
        .register();
#cdb

#par Of course this example is contrived to show many aspects with a single sample. In real world scenarios
you'd very likely only use a snall subset of these options in a custom tag implementation for example. #par

#par The example above shows the #cdi ObjectDefinitionBuilder #cdi API used for configuring a single object.
But the new DSL can now also be used to create an entire Context: #par

#cdb
ContextBuilder.newBuilder()
    .config(FlexConfig.forClass(ServiceConfig))
    .config(FlexConfig.forClass(ControllerConfig))
    .config(XmlConfig.forFile("logging.xml"))
    .object(instance1, "id1")
    .object(instance2, "id2")
    .build();
#cdb



#sc3 roadmap_definition Revise the ObjectDefintion interface ?done #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-352 Jira Ticket for Comments #url #par

#par For anyone not familiar with the framework internals this may seem to be a somewhat esotoric
explanation. You may skip to the next section in this case. #par

#par The ObjectDefinition interface turned out to be not as generic as it could be. With some of its properties it offers
access to very concrete features like asynchronous initialization or dependency injection. This could be generified
in a way that these features are not implemented in the IOC kernel itself. Instead the definition only offers the
necessary hooks that allow to plug in functionality that controls how an object is instantiated or configured. 
With such a generalization even more core features could be easily replaced and would allow very specialized variants like
a container that does not use reflection to configure its objects for example. In general this would lead to a 
leaner kernel. #par

#par Since the #cdi ObjectDefinition #cdi is a core interface simply removing the existing
methods and properties would basically break all existing custom extensions. So the plan
is to just deprecate these methods and properties and keep them in the interface for
some time. #par
 



#sc3 roadmap_xmlobjectmapper XML-Object-Mapper Configuration with Metadata ?done #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-220 Jira Ticket for Comments #url #par

#par This enhancement will make the definition of custom configuration tags easier. With MXML or Metadata it was
already quite easy, since at most a single line of code was needed to register such a tag. With XML tags the use
of the XML-Object Mapper from Spicelib is required and might involve the need to programmatically specify subtle
details of how the new XML tag maps to the configuration class. #par

#par The feature set as such will remain the same. The new mechanism will still be based on the existing
#cdi PropertyMapperBuilder #cdi class, but the need to programmatically create such a builder will go away.
First there will be sensible defaults. A property without metadata will automatically map to a corresponding
XML attribute. You can then override the default for individual properties: #par

#cdb
public class Person {

    [ChildTextNode]
    public var name:String;
    
    [ChildElement]
    public var address:Address;
    
}
#cdb

#par There will be a corresponding metadata tag for all the features currently available in the #cdi PropertyMapperBuilder #cdi. #par



#sc3 roadmap_bindings Decoupled Bindings ?done #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-468 Jira Ticket for Comments #url #par

#par This feature will allow to specify a binding between two properties (usually in two different objects)
where the target does not have to know about the source of the binding. The source will publish an object
through the use of the new #cdi [Publish] #cdi tag: #par

#cdb
[Publish][Bindable]
public var selectedContact:Contact;
#cdb

#par The targets of the binding will receive all updates on properties of the same type marked with #cdi [Subscribe] #cdi: #par

#cdb
[Subscribe]
public var selectedContact:Contact;
#cdb 

#par In addition to this basic usage there is the #cdi [PublishSubscribe] #cdi tag for properties that act both as publisher and
subscriber, the option to specify an id instead of matching by type, the option to use scopes in a similar way like with messaging 
and finally a published object may also be turned into a managed object. #par

#par This feature is built on top the Flex Binding facility, but also comes with an alternative implementation that does work
in Flash applications. #par




#sc2 roadmap_v24 Version 2.4 #sc2

#par The road map for the next version is not fully specified yet. 
Since it largely depends on user feedback, feel free to post on the forum if you are still missing something
in the framework. #par



#sc3 roadmap_message_interceptors Redesign Message Interceptors #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-465 Jira Ticket for Comments #url #par

#sub Motivation #sub

#par The changes in this area are primarily motivated by feedback from users who had difficulties to apply
the concept of message interception like it is designed today to their use cases. These were in particular: #par

#lst
#lse A user who wanted to cancel message processing based on the type of Fault returned by a service and prevent
any further CommandError handlers from getting invoked. This is currently not possible, since each MessageInterceptor
gets invoked in one phase of message processing only, which is before any regular target (like MessageHandlers or Commands)
gets invoked. This restriction is not necessary and it is possible to allow suspension or cancellation of message processors
at any point in time. #lse

#lse The current interception mechanism is unfortunate for tooling. Whenever the processor enters an interceptor, it is left
in an indetermined state. It is unclear if the interceptor will ever call proceed or whether this message gets discarded.
So any debugging or monitoring tool visualizing pending messages would need to include all processors that stopped
in an interceptor. If the interceptor opens a confirmation dialog for example, nothing will happen when the user clicks cancel.
A redesigned API would require explicit suspension, leaving the options to either call resume or cancel later, and only
messages which are indeed still pending from the perspective of application logic appear in the list of pending messages. #lse
#lst


#sub Specification #sub

#par The MessageProcessor interface would be redesigned. #par

#par Deprecated methods: #par

#cdb
function proceed () : void;
#cdb

#par New methods and properties: #par

#cdb
function suspend () : void;

function resume () : void;

function cancel () : void;

function get state () : MessageState; // active, cancelled, suspended

function get scope () : Scope;

function get senderContext () : Context;
#cdb

#par Apart from the changes outlined above the #cdi [MessageInterceptor] #cdi tag would be deprecated. It would still
be supported in version 2.4 for backwards compatibility. In Parsley 3.0 all deprecations will then be removed. #par

#par Instead all other existing message receivers would be enhanced to allow for an additional, optional parameter
of type #cdi MessageProcessor #cdi: #par

#cdb
[MessageHandler]
public function handleMessage (msg:MyMessage, processor:MessageProcessor) : void

[CommandResult]
public function afterLogin (result:User, msg:LoginMessage, processor:MessageProcessor) : void
#cdb

#par The above are just two examples. Every message receiver based on a method would be affected.
Message receivers where the message is handled by a property (e.g. #cdi [CommandStatus] #cdi or #cdi [MessageBinding] #cdi
cannot support these new capabilities of course. #par

#par The behaviour for the deprecated MessageInterceptor would remain the same for backwards compatibility. That means
the state of the processor would always be suspended at the time it enters the interceptor method. For all the other
enhanced message receiver types it would be different: even if they do specify the optional MessageProcessor parameter,
message processing will automatically continue after leaving the method unless #cdi suspend #cdi has been called
on the processor. That prevents the unfortunate indetermined state of the processor. #par

#par Finally these changes also allow the #cdi MessageInterceptor #cdi interface to be deprecated. Somewhat unrelated
the #cdi CommandTarget #cdi interface could be deprecated, too, when the existing #cdi MessageTarget #cdi interface
would be enhanced with capabilities to create a new Command. This would leave us with only three core #cdi MessageReceiver #cdi
sub-interfaces: #cdi MessageTarget #cdi, #cdi MessageErrorHandler #cdi and #cdi CommandObserver #cdi. #par


 
#sc3 roadmap_message_routing Routing Messages between Contexts #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-506 Jira Ticket for Comments #url #par

#par #ref messaging_scopes #ref already offers a great level of flexibility. But even a custom scope is always a continuous
group of Contexts. Sometimes a message must be routed from one particular part of the application to another.
This new feature would allow to create messages that contain properties with metadata that marks the property
as one containing routing information. Furthermore this mechanism could allow for lazy creation of message target Contexts.
If the target does not exist already, a pluggable strategy would create it first before routing the messages. These strategies
could deal with loading a module, opening a popup, creating an AIR window, or creating a new tab for a navigator. #par

#par This functionality shares some concepts with the existing Cairngorm 3 Module Library, but would not be limited
to dealing with modules only. #par



#sc3 roadmap_message_adapters Messaging Adapters #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-507 Jira Ticket for Comments #url #par

#par Messaging currently only deals with messages with a origin and destination within the realm of Parsley
managed objects. There are other types of messaging infrastructure typically seen in Flex applications where
it might be convenient to transparently integrate them with Parsley's existing configuration options for messaging.
These might include Consumers, Producers, binary sockets or LocalConnections, amongst others. An adapter for a Consumer
would allow to receive remote messages in a regular #cdi [MessageHandler] #cdi for example. #par



#sc3 roadmap_shared_modules Shared Module Dependencies #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-508 Jira Ticket for Comments #url #par

#par In addition to the existing support for modular applications the next version might support
more complex scenarios like shared module dependencies that will be lazily loaded on demand. 
No details have been specified yet, so if have a particular use case that is not well supported currently
feel free to post on the forum. #par



#sc3 roadmap_task_commands Easier Setup for Tasks as Commands #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-362 Jira Ticket for Comments #url #par

#par Often a Task based DynamicCommand does not do much more in the execution method than creating a Task instance, passing some
data from the message to the Task and returning it. This could be simplified through dedicated tags
for declaring Task based commands: #par

#cdb
<TaskCommand type="{MyCustomTask}" messageType="{LoginMessage}" />

<TaskGroupCommand messageType="{LoginMessage}">
    <NestedObject type="{LoginTask}"/>
    <ObjectRef idRef="loadPreferencesTask"/>
    <ObjectRef typeRef="{StartPresentationTask}"/>
</TaskGroupCommand>
#cdb

#par Two new tags would be introduced, one for declaring a single Task and one for a group of Tasks to be run sequentially or
concurrently. When declaring a group all the regular tags for defining objects or references would be permitted as child tags. #par

#par Metadata could be used to inject the message itself into the Task: #par

#cdb
[TriggerMessage]
public var msg:LoginMessage;
#cdb

#par Or alternatively just a single property of the message which is particularly useful for TaskGroups where 
each individual Task might only be interested in one aspect of the message: #par

#cdb
[TriggerMessage("username")]
public var username:String;
#cdb

#par Finally there might be existing Tasks where it's not possible to add metadata. Special child tags for declaring
the Task might allow to specifiy the property of the message to inject and the property of the Task as the injection 
target: #par

#cdb
<TaskGroupCommand messageType="{LoginMessage}">
    <Task type="{LoginTask}" messageProperty="username" injectionTarget="username"/>
    <Task type="{LoadPreferencesTask}" injectionTarget="message"/>
</TaskGroupCommand>
#cdb

#par When #cdi messageProperty #cdi is not specified the entire message instance will be injected. #par

#par In cases where a message needs data retrieved by one of the preceding tasks, a recommended pattern could be
to pass data in the message instance itself. #par



#sc3 roadmap_testing Testing Utilities #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-453 Jira Ticket for Comments #url #par

#par The UnitTests for Spicelib and Parsley already contain a bunch of classes that help with common tasks when
testing classes which are normally managed by Parsley. That may be a mock function to inject into a property
which usually holds a MessageDispatcher and now does nothing but counting the number of dispatched messages and
their types and selectors. These classes are currently hidden in the internal TestSuites and not available
in a SWC to use in application tests. These utilities should be polished and expanded and then released
as a separate #cdi parsley-test-2.4.0.swc #cdi. #par





