#sc1 lifecycle_intro Object Lifecycle #sc1

#par This chapter lists several features that go beyond the configuration features listed in previous chapters. #par


#sc2 lifecycle_factories Using Factories #sc2

#par Sometimes configuring the target object directly may not be sufficient. Maybe you want to execute some complex
logic on object creation that would be difficult to setup declaratively. In these cases you can use a factory instead.
The factory is a normal AS3 class that you can configure like any other class in Parsley, using Metadata, MXML or XML tags.
The only difference is that one method is marked as a factory method (again using Metadata, MXML or XML): #par

#cdb
class CategoryFactory {

    public var categoryName:String;
    
    [Inject]
    public var bookManager:BookManager;
    
    [Factory]
    public function createCategory () : Category {
        var books:Array = bookManager.getBooksForCategory(categoryName);
        return new Category(categoryName, books);
    }
}
#cdb

#par You can then use this factory in your configuration, for example in MXML: #par

#cdb
<Objects 
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns="http://www.spicefactory.org/parsley"
    xmlns:model="com.bookstore.model.*">
    
    <model:BookManager/>
    
    <model:CategoryFactory id="historyCategory" categoryName="history"/>

    <model:CategoryFactory id="politicsCategory" categoryName="politics"/>

    <model:CategoryFactory id="artsCategory" categoryName="arts"/>
        
</Objects> 
#cdb

#par Each of the factories we defined above will get the #cdi BookManager #cdi instance injected and then produce
instances of #cdi Category #cdi. #par

#par The special thing about using factories is that under the hood Parsley actually
creates #str two #str object definitions for each factory: One for the factory itself and one for the type the
factory method produces. This means that you can also place metadata tags on the target type (in this case the
#cdi Category #cdi class) if you want the object that the factory produces to send and receive application messages
managed by Parsley for example. #par
 
#par This also means that you can use the factory #str and #str the objects it creates at injection points, although
in most cases you'll be interested in the objects produced by the factory: #par

#cdb
[Inject(id="historyCategory")]
public var historyBooks:Category;
#cdb

#par It is recommended not to use factory methods with a return type of #cdi Object #cdi like this: #par

#cdb
[Factory]
public function createInstance () : Object {
#cdb

#par It would work, Parsley would happily process this kind of factory method. But you'll lose some of
Parsley's useful capabilities, since it uses the return type of the method for producing the object
definition for the target type. If the target type is just Object, the metadata tags on the objects
this factory actually produces would not be processed, since this happens #str before #str the factory method
will be invoked for the first time. Furthermore you cannot use objects produced by such a factory
for Dependency Injection by Type, since the type can only be determined dynamically. You would then
be constrained to Injection by Id. #par

#par Of course, like with most other Parsley features, you may also declare the factory method in 
MXML or XML. This may come in handy in some edge cases, for example for a factory that has more than
one method that produces objects. In this case placing metadata tags in the class itself would not
be possible (only one #cdi [Factory] #cdi tag is allowed). #par


#sub MXML Example #sub

#cdb
<Object id="monkey" type="{ZooFactory}">
    <Factory method="createMonkey"/> 
</Object>
<Object id="polarBear" type="{ZooFactory}">
    <Factory method="createPolarBear"/> 
</Object>
#cdb
 
#sub XML Example #sub

#cdb
<object id="monkey" type="com.example.ZooFactory">
    <factory method="createMonkey"/> 
</object>
<object id="polarBear" type="com.example.ZooFactory">
    <factory method="createPolarBear"/> 
</object>
#cdb



#sc2 lifecycle_async Asynchronous Object Initialization #sc2

#par A lot of operations in the Flash Player execute asynchronously. So it might happen that you want an object
configured in the Parsley IOC Container to load some data or assets first, before the rest of the Context gets
initialized and before this asynchronously initializing object gets injected into other objects. In this cases
you can use the #cdi [AsyncInit] #cdi tag on any #cdi EventDispatcher #cdi that fires events when the initialization
is completed (or if it has failed): #par

#cdb
#hlt [AsyncInit] #hlt
public class FileLoader extends EventDispatcher {

    public var filename:String;

    #hlt [Init] #hlt
    public function init () : void {
        var loader:URLLoader = new URLLoader();
        loader.addEventListener(Event.COMPLETE, fileLoaded);
        loader.addEventListener(IOErrorEvent.IO_ERROR, handleError);
        loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, handleError);
        loader.load(new URLRequest(filename));            
   }
   
   private function fileLoaded (event:Event) : void {
       // handle loaded file
       #hlt dispatchEvent(new Event(Event.COMPLETE)); #hlt
   }
   
   private function handleError (event:ErrorEvent) : void {
       #hlt dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, event.text)); #hlt
   }
   
}
#cdb

#par In the example above the #cdi [AsyncInit] #cdi tag tells the framework that this is an asynchronously initializing
object. In the method annotated with #cdi [Init] #cdi which will be invoked after configuration and
dependency injection has been processed for that object (see #ref lifecycle_methods #ref for details) we start the
loading process. Depending on whether the loading succeeds or not we then dispatch either an #cdi Event.COMPLETE #cdi
or an #cdi ErrorEvent.ERROR #cdi. The container will listen for those two events. In case of #cdi Event.COMPLETE #cdi it
will proceed with Context initialization. In case of #cdi ErrorEvent.ERROR #cdi the whole Context initialization process
will be cancelled. #par

#sub Switching event types #sub

#par #cdi Event.COMPLETE #cdi and #cdi ErrorEvent.ERROR #cdi are the default event types to signal whether initialization
has completed or failed. They can be switched with attributes of the #cdi [AsyncInit] #cdi tag: #par

#cdb
[AsyncInit(completeEvent="myCustomCompleteEvent",errorEvent="myCustomErrorEvent")]
#cdb

#sub Initialization Order #sub

#par AsyncInit objects will always be initialized before regular objects unless you define an order attribute for them
explicitly which always has a higher precedence. But if you have more than one object marked with #cdi [AsyncInit] #cdi
you may want to declare the initialization order explicitly as explained in the next section. The order will not be determined
by analyzing the dependencies, as they are processed on the fly during initialization and also allow for bidirectional or
circular dependencies which would make it hard to determine the order automatically. But this really is only necessary for
AsyncInit objects and only if you wish to guarantee that those are ready when they are injected into other objects, 
otherwise everything will be resolved automatically. #par 



#sc2 lifecycle_order Object Initialization Order #sc2

#par In case you want to explicitly specify the initialization order you can do that with the order attribute: #par

#sub MXML Example #sub

#cdb
<Object id="welcomeText" type="{FileLoader}" order="1">
    <AsyncInit/>
    <Init method="init"/>
    <Property name="filename" value="welcome.txt"/>
</Object>
#cdb
 
#sub XML Example #sub

#cdb
<object id="welcomeText" type="com.example.FileLoader" order="1">
    <async-init/>
    <init method="init"/>
    <property name="filename" value="welcome.txt"/>
</object>
#cdb

#par The default value if you omit this attribute is #cdi int.MAX_VALUE #cdi so that all objects without an order attribute
will execute last and in arbitrary order. The attribute can be set to any positive or negative integer value. #par

#par The order attribute can also be used for objects that initialize synchronously. For any asynchronously initializing
object in the sequence the container will wait for that object to complete its initialization before starting
with the next one. #par



#sc2 lifecycle_methods Object Lifecycle Methods #sc2

#par If you want the Parsley Container to invoke methods on your object when it is created or when it is destroyed,
you can add the #cdi [Init] #cdi or #cdi [Destroy] #cdi metadata tags to the corresponding methods: #par

#cdb
[Init]
public function init () : void {
    [...]
}
[Destroy]
public function dispose () : void {
    [...]
}
#cdb

#par The methods marked with #cdi [Init] #cdi get invoked after the object has been instantiated and
all injections have been processed. #par

#par The methods marked with #cdi [Destroy] #cdi get invoked after the Context instance they belong to has been
destroyed with #cdi Context.destroy() #cdi or when the object was removed from the Context. 
See #ref lifecycle_methods #ref for details. #par

#par For Flex Components declared in regular MXML files and wired to the Context as described in #ref view_intro #ref
the lifecycle is different: For those objects the methods get invoked whenever the object is added to or removed from the
stage respectively. Of course the #cdi [Destroy] #cdi method additionally gets invoked if the Context the object
was wired to was destroyed. #par



#sc2 lifecycle_observer Lifecycle Observer Methods #sc2

#par Added in 2.2 this functionality opens some new doors for convenient ways to observe or modify other objects
without the need to add something to their configuration. This might be particularly useful for short-lived objects
like views or commands which might enter and leave the Context at any point in time and thus are not valid sources
for regular injection points. By observing these instances you can still get hold of a reference to such a short-lived
object. #par

#cdb
[Observe]
public function enhance (panel:ShoppingCartPanel) : void;
#cdb

#par Now this method will be invoked whenever a new instance of #cdi ShoppingCartPanel #cdi (or any subclass) has
been fully configured. #par

#par The default without attributes like shown above is equivalent to: #par

#cdb
[Observe(phase="postInit", scope="global")]
#cdb

#par So you could also use a different phase of the lifecycle (like #cdi preDestroy #cdi 
to get notified when an object leaves the Context) and can also control the scope and listen 
only for matching types in the same Context with #cdi scope="local" #cdi for example. 
Scoping works the same way like scopes for messaging as explained in #ref messaging_scopes #ref. #par

#par With this mechanism you simply plug in some new class that contains such a tag and suddenly existing classes
can be enhanced without the need to touch their configuration. This is somewhat analogous to the existing
#cdi [Factory] #cdi tag which can be used to customize the object instantiation. With this tag you can customize
the object configuration after it has been instantiated. In both cases you do not even depend on the Parsley API
in any way. #par

#sub Supported lifecycle phases #sub

#tbl
#tbr #cdi preConfigure #cdi # Invokes the observer right after the object was instantiated but before any dependency injection
was performed. #tbr

#tbr #cdi preInit #cdi # Invokes the observer after dependency injection has been performed but before the init method of
the object (if available) gets invoked. #tbr

#tbr #cdi postInit #cdi # The default if the phase attribute is omitted. Invokes the observer after dependency injection
has been performed and the init method of the object (if available) has been invoked. #tbr

#tbr #cdi preDestroy #cdi # Invoked when the object is removed from the Context but before the destroy method
on the object (if available) gets invoked. #tbr

#tbr #cdi postDestroy #cdi # Invoked when the object is removed from the Context and after the destroy method
on the object (if available) was invoked. #tbr
#tbl



#sc2 lifecycle_dynamic Dynamic Objects #sc2

#par (Note: Prior to version 2.3 the framework offered the #cdi DynamicContext #cdi interface. This is still
available for backwards-compatibility, but deprecated and no longer required, since the core #cdi Context #cdi
interface now includes this functionality alongside a few new additional options). #par

#par In contrast to the usual root singleton objects specified with the #cdi <Object> #cdi tag, dynamic objects can be
added and removed from the Context dynamically. Dynamic Objects almost behave the same like regular objects. 
In particular this means: #par

#lst
#lse You can inject any regular object into the dynamic object. #lse
#lse The dynamic object can send and receive messages to and from any of the available scopes. #lse
#lse The dynamic object can have lifecycle methods like #cdi [Init] #cdi and #cdi [Destroy] #cdi. #lse
#lst

#par There is only one significant restriction for using dynamic objects: #par

#lst
#lse You cannot inject a dynamic object into another object, unless it was specified with the
#cdi <DynamicObject> #cdi tag in MXML or XML. #lse
#lst

#par This restriction is natural, since dependency injection comes with validation which would not be possible
if the set of objects available for injection could change at any point in time. For a more dynamic way
of expressing dependencies which more resembles the way Flex Bindings work you can use the #cdi [Subscribe] #cdi
tag introduced in version 2.3. #par

#par There are multiple ways to create a dynamic object: #par


#sub Adding an existing object to the Context #sub

#cdb
var instance:Object = ...;
var dynamicObject:DynamicObject = context.addDynamicObject(instance);
#cdb

#par In this case an #cdi ObjectDefinition #cdi will be created for the existing instance and metadata will
be processed for the type of that instance, performing any required dependency injection, message receiver
registration or lifecycle method invocation. #par

#par The object can be removed from the Context at any point in time: #par

#cdb
dynamicObject.remove();
#cdb

#par At this point the method marked with #cdi [Destroy] #cdi will be invoked on that object (if existent)
and any message receiver registrations will be terminated. The object is then fully removed from the Context. #par


#sub Creating a dynamic object based on objects configured in MXML or XML #sub

#par Dynamic objects can alternatively be configured in MXML or XML and then created dynamically at runtime based on these
configurations: #par

#cdb
<DynamicObject type="{SomeType}" id="dynamic1"/>
#cdb

#par The tag above offers the same set of nested configuration tags like the #cdi <Object> #cdi tag. 
You can then pull the dynamic objects from the Context by id: #par

#cdb
var dynamicObject:DynamicObject = context.createDynamicObject("dynamic1");
#cdb

#par Or alternatively fetched by type: #par

#cdb
var dynamicObject:DynamicObject = context.createDynamicObjectByType(SomeType);
#cdb

#par The instance created by the Context can then be accessed like this: #par

#cdb
var instance:Object = dynamicObject.instance;
#cdb

#par With the addition of the #cdi <DynamicObject> #cdi tag the use of the singleton attribute in the #cdi Object #cdi
tag is deprecated: #cdi <Object type="{SomeType}" singleton="false"/> #cdi will continue to work, but will now get interpreted
like a #cdi <DynamicObject> #cdi tag anyway, so is no longer required. The #cdi <Object> #cdi tag should solely be used for
declaring singletons now. #par


#sub The lifecycle of injected dynamic objects #sub

#par Dynamic objects declared with the #cdi <DynamicObject> #cdi tag are the only types of dynamic objects which can be
injected into other objects the same way like singletons, since their defintion is available at Context creation time
and thus validatable. The way the object's lifecycle is controlled in this case is different than in those cases
where they are fetched from the Context by application code with #cdi createDynamicObject #cdi. In the latter case
the application will control the lifecycle and may remove the object from the Context at any point in time.
In case of an injection however it is the framework that controls the lifecycle. The injected object will 
remain managed as long as the object it was injected into. This functionality was not available in versions
prior 2.3 but was requested quite often since it allows resource-friendly injections into dynamic obejcts
like a #cdi DynamicCommand #cdi. #par


#sub Creating a dynamic object based on programmatically created object definitions #sub

#par For building extensions which deal with object definitions from within a #cdi ObjectDefinitionDecorator #cdi
or #cdi RootConfigurationElement #cdi implementation there are two interesting variants of the #cdi addDynamicObject #cdi method
shown above. First it is possible to pass an additional #cdi ObjectDefinition #cdi to the method: #par

#cdb
var definition:ObjectDefinition = ...;
var instance:Object = ...;
var dynamicObject:DynamicObject = context.addDynamicObject(instance, definition);
#cdb

#par In this case the definition will not be created by the dynamic Context like in the preceding example. Instead
the specified definition will be used. Since version 2.2 this mechanism will be used internally to support the new
option to configure dynamically wired views in MXML. An existing instance will have to be configured by an
#cdi ObjectDefinition #cdi then which has been created elsewhere. #par

#par Finally you can also just pass a definition to the dynamic Context and it will create a new instance 
based on that definition: #par

#cdb
var definition:ObjectDefinition = ...;
var dynamicObject:DynamicObject = context.addDynamicDefinition(definition);
#cdb

#par Again, the instance can be accessed like this: #par

#cdb
var instance:Object = dynamicObject.instance;
#cdb


#sub Removing a dynamic object from the Context #sub

#par In all these different use cases removal of the object happens in the way already demonstrated: #par

#cdb
dynamicObject.remove();
#cdb






 






