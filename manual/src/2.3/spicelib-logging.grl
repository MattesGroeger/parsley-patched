#sc1 spicelib-logging_intro Logging for Flash Applications #sc1

#par The logging framework allows to log custom messages from application code and use 
the configuration options to filter log output based on logger names and log levels.
It was first developed in AS2 and used in inhouse projects for more than three years until
we ported it to AS3 and included it in the public Spicelib release. #par

#par It is currently maintained primarily for use in Flash Applications. 
The Flex SDK has its own Logging API which you can use when building Flex Applications. #par




#sc2 spicelib-logging_application Adding log statements to application code #sc2

#par Usually you would just create a constant that holds the logger for your particular class:#par

#cdb
private static const log : Logger = LogContext.getLogger(MyClass);
#cdb  

#par You can just pass a #cdi Class #cdi instance to the #cdi getLogger #cdi method. In this case
the fully qualified class name would be used as the name for the logger.
Of course you could use any name you want (specified as a String) or create more that one logger for a class, 
but using
the class name is the most common usage. The static #cdi getLogger #cdi method of the #cdi LogContext #cdi
class uses the default #cdi LogFactory #cdi under the hood. This is not required but it makes sure that
your application logs use the same configuration and appenders than the internal logs of all Spicefactory
projects. Alternatively you could also instantiate and use a custom #cdi LogFactory #cdi and configure 
it separately. #par 

#par You could then use that #cdi Logger #cdi instance anywhere in the class: #par

#cdb
public function loadProject (id:String) : void {
    log.info("Start loading project with id {0}", id);
    // do something
}
#cdb



#sc2 spicelib-logging_levels Log levels #sc2

#par Log levels offer a way to organize log statements into a hierarchy of different severities.
The logging configuration (explained in the next section) allows to filter the log output
based on Logger names and levels.
The framework supports the following log levels (semantics borrowed from log4j and other existing frameworks): #par

#tbl
#tbr FATAL # Very severe error events that will presumably lead the application to abort. #tbr 
#tbr ERROR # Error events that might still allow the application to continue running. #tbr 
#tbr WARN # Potentially harmful situations. #tbr 
#tbr INFO # Informational messages that highlight the progress of the application at coarse-grained level. #tbr 
#tbr DEBUG # Fine-grained informational events that are most useful to debug an application. #tbr 
#tbr TRACE # Very fine-grained information (represents the lowest rank of all levels). #tbr 
#tbl



#sc2 spicelib-logging_config Configuration #sc2

#par There are two ways to configure the logging framework: Parsley XML and programmatic configuration. #par


#sc3 spicelib-logging_config_parsley Using Parsley XML Tags #sc3

#par If you are using Parsley anyway, using its XML configuration is probably the most convenient way.
You can maintain different configuration files for each developer of the project and change it frequently 
without recompiling. See #ref logging_flash #ref in the Parsley Manual for details. #par


#sc3 spicelib-logging_config_programmatic Programmatic Configuration #sc3

#par If you don't use Parsley for application configuration it is recommended to configure
logging programmatically since you would pull in the whole Parsley library otherwise.
An example setup could look like this: #par 

#cdb
var factory:FlashLogFactory = new DefaultLogFactory();

factory.setRootLogLevel(LogLevel.WARN);
factory.addLogLevel("com.mycompany.mypackage.controller", LogLevel.DEBUG);
factory.addLogLevel("com.mycompany.mypackage.services", LogLevel.DEBUG);

var traceApp:Appender = new TraceAppender();
traceApp.threshold = LogLevel.TRACE;
factory.addAppender(traceApp);

LogContext.factory = factory;
#cdb

#par This block should execute once on application startup. #par


#sc2 spicelib-logging_customize Customizing the Logging Framework #sc2

#par The most common use case for customizing the logging framework would be to implement your own
#cdi Appender #cdi. This might be necessary if you have some special requirements like the need
to send log statements over a socket connection for example. Implementing the #cdi Appender #cdi
interface is quite straightforward. You can look at the source of Spicelibs existing two implementations. #par

#par If you need even more flexibility you could also develop your own implementations of the 
#cdi Logger #cdi and #cdi LogFactory #cdi interfaces, but that might be a rather rare scenario. #par  

#par In the future we might add more #cdi Appender #cdi implementations to Spicelib like a 
#cdi FileAppender #cdi for AIR applications or even might look into integrating with the Flex Logging
Framework. #par


