#sc2 remoting_cinnamon Cinnamon Remoting #sc2

#par If you don't need Pimentos data management capabilities and just want to use AMF-based Flex/Flash-to-Java
Remoting you can stick with Cinnamon instead. See the #url http://www.spicefactory.org/pimento/ Pimento/Cinnamon Info Page #url 
for more details. #par

#par Parsley includes custom configuration tags for Cinnamon for MXML and XML that allow you to define
the channel and services. #par


#sub MXML Example #sub

#cdb
<Objects 
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns="http://www.spicefactory.org/parsley"
    xmlns:cinnamon="http://www.spicefactory.org/parsley/cinnamon">

    <fx:Script>
        <![CDATA[
            import com.bookstore.services.*;
        ]]>
    </fx:Script>
    
    <fx:Declarations>
        
        <cinnamon:Channel
            url="http://localhost:8080/test/service/"
            timeout="3000"
        />
        <cinnamon:Service
            name="loginService"
            type="{LoginServiceImpl}"
        />
        <cinnamon:Service
            name="cartService"
            type="{CartServiceImpl}"
        />
    
        <!-- other objects -->
        
    </fx:Declarations>
    
</Objects> 
#cdb

#par If you define only a single channel (like in most use cases) you don't have to explicitly refer to it in the service definitions.
Parsley will automatically wire the single channel to all services then.
In case of multiple channels you'd have to set the id property for the channel and reference it in service definitions: #par

#cdb
<cinnamon:Channel
    id="#hlt mainChannel #hlt"
    url="http://localhost:8080/test/service/"
    timeout="3000"
/>
<cinnamon:Service
    name="loginService"
    type="{LoginServiceImpl}"
    channel="#hlt mainChannel #hlt"
/>
#cdb

#par You can then inject services into your actions: #par

#cdb
[Inject]
public var loginService:LoginService;

[Command]
public function login (event:LoginEvent) : ServiceRequest {
    return loginService.login(event.username, event.password);
} 
#cdb

#par With Cinnamon there is no need for BusinessDelegates: The remote services implement business interfaces themselves, so you
can directly inject them into actions. These interfaces are usually generated by Cinnamons Ant Task, automatically porting
existing Java service interfaces to AS3. #par



#sub XML Example #sub

#cdb
<objects 
    xmlns="http://www.spicefactory.org/parsley"
    xmlns:pimento="http://www.spicefactory.org/parsley/cinnamon"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.spicefactory.org/parsley 
      http://www.spicefactory.org/parsley/schema/2.3/parsley-core.xsd 
    http://www.spicefactory.org/parsley/cinnamon 
      http://www.spicefactory.org/parsley/schema/2.3/parsley-cinnamon.xsd"
    >
    <cinnamon:channel
        url="http://localhost:8080/test/service/"
        timeout="3000"
    />
    <cinnamon:service
        name="loginService"
        type="com.bookstore.services.LoginServiceImpl"
    />
    <cinnamon:service
        name="cartService"
        type="com.bookstore.services.CartServiceImpl"
    />
</objects>
#cdb

#par Since this is an XML extension it has to be initialized explicitly before using the #cdi XmlContextBuilder #cdi: #par

#cdb
CinnamonXmlSupport.initialize();
#cdb
