#sc2 roadmap_v24 Version 2.4 #sc2

#par There will be two milestone releases during the development of this version, followed by the final
release and possibly one or two bugfix and maintenance releases. #par



#sc3 roadmap_reflection_10_1 Support for new Reflection Features in Flash Player 10.1 ?done #sc3

#par Flash Player 10.1 introduced a new reflection hook that avoids the use of XML like the old #cdi describeType #cdi
function and uses JSON under the hood instead. Parsley 2.4 will automatically detect whether this new function
is available and prefer this over the old approach and only fall back to XML for older Players. Since reflection
is the major bottleneck for any IOC container in current Flash Players every performance optimization helps
improve the situation. #par



#sc3 roadmap_bootstrap Redesign Context Bootstrap Service ?done #sc3

#par This change primarily affects developers writing extensions. It has no effect on normal application code. #par 

#par While the other 6 IOC kernel services are already stabilizing and won't be touched in version 2.4 (apart from small
enhancements for the core messaging logic), one of the 7 kernel services needed a larger refactoring (basically a rewrite).
The old #cdi CompositeContextBuilder #cdi interface already moved from public API to internal API over the last releases where
higher level APIs like the #cdi <ContextBuilder> #cdi tag or ContextBuilder DSL were introduced. Now it gets deprecated and replaced
by a new #cdi BootstrapManager #cdi which more cleanly offers one central hook for all bootstrap configuration which is now also
completely inherited from parent Context to child Context. The new home for global defaults is now #cdi BootstrapDefaults.config #cdi,
replacing the old #cdi GlobalFactoryRegistry #cdi #par.



#sc3 roadmap_config_properties Configuration Properties inherited by Child Contexts ?done #sc3

#par The new #ref config_properties #ref introduced in version 2.3 are now inherited by child Contexts.
Previously they were only available for the one Context they were loaded into, so that they had to be loaded
multiple times if they were needed in more than just one Context. #par



#sc3 roadmap_modules Simplify Support for Flex Modules ?done #sc3

#par Version 2.1 to 2.3 installed a wrapper around the original Flex #cdi ModuleManager #cdi, implementing the
#cdi IModuleInfo #cdi interface itself. While this worked reasonably well, it turned out to be unnecessary overhead,
as the major goal for that wrapper was to detect and remember the #cdi ApplicationDomain #cdi to use for each
Context getting built. This task is now performed by a much simpler service, which can also be replaced.
The default implementation looks for the #cdi moduleFactory #cdi property of the first view root for each new
Context and retrieves the domain from there. In Flash Applications the default looks for the 
#cdi viewRoot.root.loaderInfo #cdi property. #par

#par If any of the automatic approaches does not work, the #cdi ApplicationDomain #cdi can still be specified
explicitly like in previous versions. #par



#sc3 roadmap_message_interceptors Redesign Message Interceptors #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-465 Jira Ticket for Comments #url #par

#sub Motivation #sub

#par The changes in this area are primarily motivated by feedback from users who had difficulties to apply
the concept of message interception like it is designed today to their use cases. These were in particular: #par

#lst
#lse A user who wanted to cancel message processing based on the type of Fault returned by a service and prevent
any further CommandError handlers from getting invoked. This is currently not possible, since each MessageInterceptor
gets invoked in one phase of message processing only, which is before any regular target (like MessageHandlers or Commands)
gets invoked. This restriction is not necessary and it is possible to allow suspension or cancellation of message processors
at any point in time. #lse

#lse The current interception mechanism is unfortunate for tooling. Whenever the processor enters an interceptor, it is left
in an indetermined state. It is unclear if the interceptor will ever call proceed or whether this message gets discarded.
So any debugging or monitoring tool visualizing pending messages would need to include all processors that stopped
in an interceptor. If the interceptor opens a confirmation dialog for example, nothing will happen when the user clicks cancel.
A redesigned API would require explicit suspension, leaving the options to either call resume or cancel later, and only
messages which are indeed still pending from the perspective of application logic appear in the list of pending messages. #lse
#lst


#sub Specification #sub

#par The MessageProcessor interface would be redesigned. #par

#par Deprecated methods: #par

#cdb
function proceed () : void;
#cdb

#par New methods and properties: #par

#cdb
function suspend () : void;

function resume () : void;

function cancel () : void;

function get state () : MessageState; // active, cancelled, suspended

function get scope () : Scope;

function get senderContext () : Context;

function sendResponse (msg:Object, selector:* = null) : void;
#cdb

#par Apart from the changes outlined above the #cdi [MessageInterceptor] #cdi tag would be deprecated. It would still
be supported in version 2.4 for backwards compatibility. In Parsley 3.0 all deprecations will then be removed. #par

#par Instead all other existing message receivers would be enhanced to allow for an additional, optional parameter
of type #cdi MessageProcessor #cdi: #par

#cdb
[MessageHandler]
public function handleMessage (msg:MyMessage, processor:MessageProcessor) : void

[CommandResult]
public function afterLogin (result:User, msg:LoginMessage, processor:MessageProcessor) : void
#cdb

#par The above are just two examples. Every message receiver based on a method would be affected.
Message receivers where the message is handled by a property (e.g. #cdi [CommandStatus] #cdi or #cdi [MessageBinding] #cdi
cannot support these new capabilities of course. #par

#par The behaviour for the deprecated MessageInterceptor would remain the same for backwards compatibility. That means
the state of the processor would always be suspended at the time it enters the interceptor method. For all the other
enhanced message receiver types it would be different: even if they do specify the optional MessageProcessor parameter,
message processing will automatically continue after leaving the method unless #cdi suspend #cdi has been called
on the processor. That prevents the unfortunate indetermined state of the processor. #par

#par Finally these changes also allow the #cdi MessageInterceptor #cdi interface to be deprecated. Somewhat unrelated
the #cdi CommandTarget #cdi interface could be deprecated, too, when the existing #cdi MessageTarget #cdi interface
would be enhanced with capabilities to create a new Command. This would leave us with only three core #cdi MessageReceiver #cdi
sub-interfaces: #cdi MessageTarget #cdi, #cdi MessageErrorHandler #cdi and #cdi CommandObserver #cdi. #par


 
#sc3 roadmap_message_routing Routing Messages between Contexts #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-506 Jira Ticket for Comments #url #par

#par #ref messaging_scopes #ref already offers a great level of flexibility. But even a custom scope is always a continuous
group of Contexts. Sometimes a message must be routed from one particular part of the application to another.
This new feature would allow to create messages that contain properties with metadata that marks the property
as one containing routing information. Furthermore this mechanism could allow for lazy creation of message target Contexts.
If the target does not exist already, a pluggable strategy would create it first before routing the messages. These strategies
could deal with loading a module, opening a popup, creating an AIR window, or creating a new tab for a navigator. #par

#par This functionality shares some concepts with the existing Cairngorm 3 Module Library, but would not be limited
to dealing with modules only. #par



#sc3 roadmap_message_adapters Messaging Adapters #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-507 Jira Ticket for Comments #url #par

#par Messaging currently only deals with messages with a origin and destination within the realm of Parsley
managed objects. There are other types of messaging infrastructure typically seen in Flex applications where
it might be convenient to transparently integrate them with Parsley's existing configuration options for messaging.
These might include Consumers, Producers, binary sockets or LocalConnections, amongst others. An adapter for a Consumer
would allow to receive remote messages in a regular #cdi [MessageHandler] #cdi for example. #par



#sc3 roadmap_default_scope Allow to Switch the Default Scope for Message Receivers #sc3

#par This is a much requested feature. In current versions the default scope for message receivers is always the global scope.
This is a reasonable choice for smaller applications, in particular when only one Context gets created and scoping is not 
relevant anyway. But in larger applications this quickly becomes a burden, as objects in modular applications often need to 
predominantly use the local scope to avoid stepping on each other toes. #par

#par Therefor the next version will finally allow to simply switch the default: #par

#cdb
<parsley:ContextBuilder config="...">
    <parsley:MessageSettings defaultReceiverScope="local"/>
</parsley:ContextBuilder> 
#cdb



#sc3 roadmap_view_lifecycle Pluggable ViewLifecycleManagers #sc3

#par When the automatic removal of views or view roots kicks in, it is currently always based on stage events.
The only alternative is to switch that feature off and manually destroy the Context or remove the view from the Context. #par

#par Since some Flex Components like AIR windows have flaky stage events, the default mechanism cannot be used here.
A new hook could be used to avoid manual disposal through specifying a different lifecycle management for certain UI components: #par

#cdb
<parsley:ContextBuilder config="...">
    <parsley:ViewLifecycle type="{Window}">
        <custom:MyAirWindowLifecycle/>
    </parsley:ViewLifecycle>
</parsley:ContextBuilder>    
#cdb






    







