#sc2 roadmap_v24 Version 2.4 #sc2

#par The features listed in this section are out of scope for version 2.4, but might get added
in a later release. #par



#sc3 roadmap_shared_modules Shared Module Dependencies #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-508 Jira Ticket for Comments #url #par

#par In addition to the existing support for modular applications the next version might support
more complex scenarios like shared module dependencies that will be lazily loaded on demand. 
No details have been specified yet, so if have a particular use case that is not well supported currently
feel free to post on the forum. #par



#sc3 roadmap_task_commands Easier Setup for Tasks as Commands #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-362 Jira Ticket for Comments #url #par

#par Often a Task based DynamicCommand does not do much more in the execution method than creating a Task instance, passing some
data from the message to the Task and returning it. This could be simplified through dedicated tags
for declaring Task based commands: #par

#cdb
<TaskCommand type="{MyCustomTask}" messageType="{LoginMessage}" />

<TaskGroupCommand messageType="{LoginMessage}">
    <NestedObject type="{LoginTask}"/>
    <ObjectRef idRef="loadPreferencesTask"/>
    <ObjectRef typeRef="{StartPresentationTask}"/>
</TaskGroupCommand>
#cdb

#par Two new tags would be introduced, one for declaring a single Task and one for a group of Tasks to be run sequentially or
concurrently. When declaring a group all the regular tags for defining objects or references would be permitted as child tags. #par

#par Metadata could be used to inject the message itself into the Task: #par

#cdb
[TriggerMessage]
public var msg:LoginMessage;
#cdb

#par Or alternatively just a single property of the message which is particularly useful for TaskGroups where 
each individual Task might only be interested in one aspect of the message: #par

#cdb
[TriggerMessage("username")]
public var username:String;
#cdb

#par Finally there might be existing Tasks where it's not possible to add metadata. Special child tags for declaring
the Task might allow to specifiy the property of the message to inject and the property of the Task as the injection 
target: #par

#cdb
<TaskGroupCommand messageType="{LoginMessage}">
    <Task type="{LoginTask}" messageProperty="username" injectionTarget="username"/>
    <Task type="{LoadPreferencesTask}" injectionTarget="message"/>
</TaskGroupCommand>
#cdb

#par When #cdi messageProperty #cdi is not specified the entire message instance will be injected. #par

#par In cases where a message needs data retrieved by one of the preceding tasks, a recommended pattern could be
to pass data in the message instance itself. #par



#sc3 roadmap_testing Testing Utilities #sc3

#par #url http://opensource.powerflasher.com/jira/browse/PSL-453 Jira Ticket for Comments #url #par

#par The UnitTests for Spicelib and Parsley already contain a bunch of classes that help with common tasks when
testing classes which are normally managed by Parsley. That may be a mock function to inject into a property
which usually holds a MessageDispatcher and now does nothing but counting the number of dispatched messages and
their types and selectors. These classes are currently hidden in the internal TestSuites and not available
in a SWC to use in application tests. These utilities should be polished and expanded and then released
as a separate #cdi parsley-test-2.4.0.swc #cdi. #par
