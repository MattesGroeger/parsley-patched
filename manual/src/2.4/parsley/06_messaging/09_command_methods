#sc2 messaging_command_methods Asynchronous Command Methods #sc2

#par Introduced with version 2.2 the Parsley framework now incorporates several ideas which originated
in the Cairngorm 3 Library project, in particular the 
#url http://opensource.adobe.com/wiki/display/cairngorm/HowToUseCairngormIntegration Integration Library #url. #par

#par Loose command methods like described in this section are no longer recommended and might be removed
from the core framework in Parsley 3. In practice most developers prefer the #ref messaging_command_objects #ref
instead, since this is a more common way to program a command. #par

#par The section #str Handling the result #str below still applies though, as these decoupled result handlers
can also be used when the actual command execution happens in a Short-lived Command Object. The documentation
on commands will be rewritten and improved for Parsley 3 to be more aligned with best practices which have emerged in the
Parsley 2 time span. #par

#par A Command method allows for a different type of message handling
than the existing #cdi [MessageHandler] #cdi tag. With the #cdi [Command] #cdi tag you can instruct
the framework to manage the execution of an asynchronous command for you: #par

#cdb
[Inject]
public var service:RemoteObject;

#hlt [Command] #hlt
public function saveUser (message:SaveUserMessage) : #hlt AsyncToken #hlt {
    return service.saveUser(message.user);
}
#cdb

#par The #cdi [Command] #cdi tag supports the same set of attributes like the #cdi [MessageHandler] #cdi
tag. The logic for matching messages to commands is also the same. In the example above the command
will be executed for all messages of type #cdi SaveUserMessage #cdi (including subtypes) with the 
selector #cdi save #cdi which usually refers to the event type. #par

#par The difference is that a command is not required to have a void return type like a regular message handler.
Instead it can specify a type that the framework can use to manage the asynchronous command execution for you. 
In this case it's the #cdi AsyncToken #cdi that was returned by the remote call. Now the framework
will also manage the result or eventual fault for you. #par



#sub Handling the result #sub

#par Any object can contain a method
that wishes to handle the result of such a call: #par

#cdb
[CommandResult]
public function handleResult (user:User, message:SaveUserMessage) : void {
#cdb

#par In this case the User instance returned by the remote call will be passed to the result handler
alongside the original message that triggered the action. Like with normal message handlers the parameter
type for the message is used to determine which handlers to invoke. It is always
a combination of message type (polymorphically) and an optional selector value which serves as
a secondary selection key. #par

#par Alternatively you can also specify the #cdi ResultEvent #cdi instead of the actual result value as the 
parameter type, in cases where you need access to headers returned from the server for example: #par

#cdb
[CommandResult]
public function handleResult (result:ResultEvent, message:SaveUserMessage) : void {
#cdb



#sub Handling command completion, but ignoring the result #sub

#par If you are not interested in the actual result, but instead only want to execute some logic
triggered by the completion of the command, you can use another tag: #par

#cdb
[CommandComplete]
public function handleResult (message:SaveUserMessage) : void {
#cdb

#par This means that this method would get invoked
whenever any command triggered by an #cdi SaveUserMessage #cdi has completed. #par



#sub Handling errors #sub

#par For receiving the eventual fault events, another tag can be used: #par

#cdb
[CommandError]
public function handleResult (fault:FaultEvent, trigger:SaveUserMessage) : void {
#cdb

#par The parameters are again both optional and the rules for matching are the same as
for #cdi [CommandResult] #cdi. #par

#par Finally you can also observe the status of executing commands: #par

#cdb
[CommandStatus(type="com.foo.messages.SaveUserMessage")]
public var isSaving:Boolean;
#cdb

#par This boolean flag will always be true if one or more asynchronous commands matching the specified
type and selector are currently executing. It will be false otherwise. This is very convenient
for tasks like disabling buttons during command execution for example. #par

#par Unfortunately, when using this tag as metadata the trigger message has to be specified as a
String. For this reason you may sometime prefer to use MXML configuration in such a case: #par

#cdb
<Object type="{SomeType}">
    <CommandStatus property="isSaving" type="{SaveUserMessage}"/>
</Object>
#cdb

#par For this configuration style there is no risk that refactoring leads to runtime errors
due to stale fully qualified class names in buried somewhere in metadata tags. #par



#sub Supported Command Types #sub

#par The preceding examples all showed commands that execute remote calls and return an
#cdi AsyncToken #cdi. This is not the only option available though. The command feature
can also be used with Cinnamon Remoting, which returns instances of #cdi ServiceRequest #cdi
instead as it does not use Flex RemoteObjects. Finally the commands are integrated with
the Spicelib Task Framework, so a command can also declare #cdi Task #cdi as the return
type. #par

#par As you might expect these are only the three builtin options. You can extend the 
framework easily through creating your own CommandFactories. For details see
#ref extensions_commands #ref. #par
