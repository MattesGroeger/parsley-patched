#sc2 reflection_basics  The basics #sc2

#par We will use the #cdi flash.geom.Point #cdi class from the core Player API to illustrate
the features of the Spicelib Reflection API. The following listing shows the output of
the #cdi flash.utils.describeType #cdi method if invoked with #cdi Point #cdi as the parameter: #par

#cdb
<type name="flash.geom::Point" base="Class" isDynamic="true" isFinal="true" isStatic="true">
  <extendsClass type="Class"/>
  <extendsClass type="Object"/>
  <method name="interpolate" declaredBy="flash.geom::Point" returnType="flash.geom::Point">
    <parameter index="1" type="flash.geom::Point" optional="false"/>
    <parameter index="2" type="flash.geom::Point" optional="false"/>
    <parameter index="3" type="Number" optional="false"/>
  </method>
  <method name="polar" declaredBy="flash.geom::Point" returnType="flash.geom::Point">
    <parameter index="1" type="Number" optional="false"/>
    <parameter index="2" type="Number" optional="false"/>
  </method>
  <method name="distance" declaredBy="flash.geom::Point" returnType="Number">
    <parameter index="1" type="flash.geom::Point" optional="false"/>
    <parameter index="2" type="flash.geom::Point" optional="false"/>
  </method>
  <accessor name="prototype" access="readonly" type="*" declaredBy="Class"/>
  <factory type="flash.geom::Point">
    <extendsClass type="Object"/>
    <constructor>
      <parameter index="1" type="Number" optional="true"/>
      <parameter index="2" type="Number" optional="true"/>
    </constructor>
    <method name="subtract" declaredBy="flash.geom::Point" returnType="flash.geom::Point">
      <parameter index="1" type="flash.geom::Point" optional="false"/>
    </method>
    <method name="normalize" declaredBy="flash.geom::Point" returnType="void">
      <parameter index="1" type="Number" optional="false"/>
    </method>
    <method name="toString" declaredBy="flash.geom::Point" returnType="String"/>
    <method name="clone" declaredBy="flash.geom::Point" returnType="flash.geom::Point"/>
    <method name="offset" declaredBy="flash.geom::Point" returnType="void">
      <parameter index="1" type="Number" optional="false"/>
      <parameter index="2" type="Number" optional="false"/>
    </method>
    <accessor name="length" access="readonly" type="Number" declaredBy="flash.geom::Point"/>
    <method name="equals" declaredBy="flash.geom::Point" returnType="Boolean">
      <parameter index="1" type="flash.geom::Point" optional="false"/>
    </method>
    <variable name="y" type="Number"/>
    <method name="add" declaredBy="flash.geom::Point" returnType="flash.geom::Point">
      <parameter index="1" type="flash.geom::Point" optional="false"/>
    </method>
    <variable name="x" type="Number"/>
  </factory>
</type>
#cdb

As you see you get information about superclasses, properties (#cdi &lt;accessor&gt; #cdi and 
#cdi &lt;variable&gt; #cdi tags), the constructor and methods and their parameter types. The Spicelib
Reflection API builds on top of the output generated by #cdi describeType #cdi and offers the
following features:

#lst
#lse A convenient API to retrieve that information without the need to parse XML. #lse
#lse A central cache so that invocations of #cdi describeType #cdi and XML parsing occur only once
for each class. #lse
#lse A central repository to register #cdi Converter #cdi instances for any number of target types. #lse
#lse Methods to reflectively set properties and invoke methods of instances while using the registered
converters to automatically convert method parameters and property values if their type does not match
the required type. #lse
#lse The option to register custom classes to represent metadata tags to offer a type-safe way
to reflect on metadata tags and its attributes. #lse
#lst

#par The following sections will explain each of these features. #par
